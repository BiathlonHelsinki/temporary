- unless @experiment.comments.empty?
  #comments_list
    .row.expanded
      .small-12.columns
        %h1= t :discussion
      - if @experiment.discussion.size > 0
        .small-12.columns
          .comment_count= "This experiment has #{pluralize(@experiment.discussion.size, 'comment')}."
    - @experiment.discussion.sort_by(&:created_at).each do |comment|
      .row.expanded
        .small-12.columns
          .entry{class: [comment.class.to_s.downcase, comment == @experiment.discussion.sort_by(&:created_at).last ? :last : false]}
            .row
              .sma11-12.medium-8.columns.end
                .row
                  .small-2.columns
                    = link_to image_tag(comment.user.avatar.url(:box)), comment.user, target: :_blank, class: :comment_avatar

                    - if user_signed_in?
                      - if can? :destroy, comment
                        = link_to 'Delete this comment', comment, method: :delete, data: {confirm: 'Are you sure? If someone has replied to this comment and you delete it, it might be confusing.'}, class: [:button, :tiny, :secondary]
                  .small-10.columns
                    .comment_type
                      = raw t(:user_says, :user => comment.user.display_name)
                    .date= l comment.created_at, format: :long
                    .comment_content
                      = simple_format(comment.content_linked)
                      - if comment.image?
                        %br/
                        .image_attached= image_tag comment.image.url(:medium)
                      - if comment.attachment?
                        %p= link_to t(:download) + ' ' + File.basename(URI.parse(comment.attachment.url).path), comment.attachment.url, class: [:button, :round, :tiny]
                  
- if user_signed_in?
  
  - if can? :create, Comment
    = content_for :jquery do
      :plain
        $("#comment_input").mentionable("/users/mentions", {position: 'right'});
        
    .row.expanded
      .small-12.columns
        #comment_form
          .row
            .small-12.medium-8.columns.end
              .row
                .small-2.columns
                  = image_tag current_user.avatar.url(:box)
                  
                  %p.small= link_to t(:edit_profile), edit_user_path(current_user), class: [:button, :tiny, :secondary, :round]
                .small-10.columns
                  %h3
                    = t :what_do_you_think_about_this
                  %p.small
                    %u Tagging: 
                    %br/
                    %em People: type '@' followed by someone's username [eg: @Jussi, @PsychoDog]
                    %br/
                    %em Experiments: type '#' followed by the name of the experiment [eg: #Open] 
                  = semantic_form_for [ @experiment,  @comment = @experiment.comments.build(user: current_user)], html: {onSubmit: "return getContent();", multipart: true, :"data-abide" => '' } do |f|
                    = f.input :user_id, as: :hidden, data: {value: current_user.id}
                    #comment_wrapper
                      #comment_input{contenteditable: true}

                    = f.input :content, :label => false, input_html: {:required => '', id: :comment_input_textarea}
                    = f.input :image, :label => t(:attach_image_to_comment)
                    = f.input :attachment, :label => t(:attach_attachment_to_comment)
                    - if current_user == @experiment.primary_sponsor || current_user == @experiment.secondary_sponsor
                      = f.input :frontpage, label: "Is this frontpage news?", hint: 'Tick this box and the comment will appear on Temporary\'s frontpage in the newsfeed.'
                    = f.submit t(:leave_comment), :class => [:button, :round]
- else
  .row.expanded
    .small-12.columns                
      %h3
        = link_to 'Log in', '/users/sign_in'
        to comment on this experiment.          