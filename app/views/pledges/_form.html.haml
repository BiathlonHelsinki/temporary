= semantic_form_for [@item, @pledge], html: {onSubmit: "return getContentEmptyOK();", multipart: true, :"data-abide" => '' } do |f|
  .row.expanded
    .small-10.medium-9.columns
      %p 
        You have
        = raw("#{current_user.available_balance + @pledge.pledge.to_i}#{tsign}")
        available.
      - if @item.has_enough?
        - if @item.recurs?
          - if @item.total_needed_with_recurrence > @item.pledged
            %p= raw "This experiment is proposed to meet multiple times. At Temporary, multi-day experiments cost per day, with a 10% discount applied to each successive meeting (until it gets down to 20#{tsign}, the minimum cost of any experiment)."
            
            - if @item.intended_sessions == 0
              %p This proposal does not specify how many times it will meet, so it will continue indefinitely.
              
            - else
              %p
                This proposal currently plans to meet  
                = @item.intended_sessions.to_s
                times. There are currently enough Temps pledged 
                = raw "(#{@item.pledged}#{tsign})"
                to schedule
                = pluralize(@item.number_that_can_be_scheduled.to_s, 'meeting') + "."
                
        - else
          - unless @next_meeting.nil?
            %p
              This proposal already has enough pledges and will be reviewed for scheduling at the next meeting,
              = link_to(@next_meeting.name, experiment_instance_path(@next_meeting.experiment, @next_meeting), target: :_blank) + "."
              You may still pledge additional Temps towards it, however.
      - else
        %p
          This proposal needs 
          = raw "#{@item.needed_for_next - @item.remaining_pledges} more #{tsign}"
          to be reviewed for scheduling.
          
        %p

          You may pledge a maximum of
          = raw "#{@item.maximum_pledgeable(current_user)}#{tsign}"
          to this proposal.
          
        %p 
          %em (All proposals require at least two supporters before they can be scheduled).


      - if @api_status == false
        %p We're sorry, the Biathlon API is currently offline. Please try again later.
      - elsif current_user.available_balance < 1
        %p You do not currently have any Temps available to pledge.
        - unless f.object.new_record?
          = link_to 'Delete your pledge!', [f.object.item, f.object], method: :delete, class: [:button, :small, :alert], data: {confirm: "Are you sure? Your #{tsign} will be restored to your full balance."} 
      - else
        = content_for :jquery do
          :plain
            $("#comment_input").mentionable("/users/mentions", {position: 'right'});
        %h3
          How many 
          = ENV['currency_full_name'].pluralize
          would you like to pledge?
        .row
          .small-2.medium-2.columns= f.input :pledge, label: 'Your pledge:', input_html: {required: ''}
    
        .row
          .small-10.medium-6.columns
            %label Any comments on your pledge?
            #comment_wrapper
              #comment_input{contenteditable: true}= f.object.new_record? ? '' : raw(f.object.comment)

            -#= f.input :content, :label => false, input_html: {:required => '', id: :comment_input_textarea}
            
            = f.input :comment, label: false,  as: :text, input_html: { id: :comment_input_textarea }
        .row
          .small-10.medium-6.columns
            = f.submit 'Pledge!', class: [:button]
            - unless f.object.new_record?
              = link_to 'Delete your pledge!', [f.object.item, f.object], method: :delete, class: [:button, :small, :alert, :delete_pledge], data: {confirm: raw("Are you sure? Your #{tsign} will be restored to your full balance.")}
  