= semantic_form_for [@item, @pledge], html: {onSubmit: "return getContentEmptyOK();", multipart: true, :"data-abide" => '' } do |f|
  .row.expanded
    .small-10.medium-9.columns
      %p 
        You have
        = raw("#{current_user.available_balance + @pledge.pledge.to_i}#{tsign}")
        available.
      - if @item.has_enough?
        - if @item.recurs?
          - if @item.total_needed_with_recurrence > @item.pledged
            %p= raw "This experiment is proposed to meet multiple times. At Temporary, multi-day experiments cost per day, with a 10% discount applied to each successive meeting (until it gets down to 20#{tsign}, the minimum cost of any experiment)."
            
            - if @item.intended_sessions == 0
              %p This proposal does not specify how many times it will meet, so it will continue indefinitely.
              %p
                - unless @item.instances.published.empty?
                  This experiment has already happened (or been scheduled to happen)
                  = pluralize(@item.instances.published.size, 'time') + "."
                There are currently enough Temps pledged 
                = raw "(#{@item.remaining_pledges}#{tsign})"
                to schedule
                = pluralize(@item.number_that_can_be_scheduled.to_s, @item.instances.published.empty? ? 'meeting' : 'more meeting') + "."
            - else
              %p
                This experiment is proposed to happen
                = @item.intended_sessions.to_s
                times. 
                - unless @item.instances.published.empty?
                  This experiment has already happened (or been scheduled to happen)
                  = pluralize(@item.instances.published.size, 'time') + "."
                There are currently enough Temps pledged 
                = raw "(#{@item.remaining_pledges}#{tsign})"
                to schedule
                = pluralize(@item.number_that_can_be_scheduled.to_s, @item.instances.published.empty? ? 'meeting' : 'more meeting') + "."
                
        - else
          - unless @next_meeting.nil?
            %p
              This proposal already has enough pledges and will be reviewed for scheduling at the next meeting,
              = link_to(@next_meeting.name, experiment_instance_path(@next_meeting.experiment, @next_meeting), target: :_blank) + "."
              You may still pledge additional Temps towards it, however.
      - else
        - if @item.recurs?
          - if @item.total_needed_with_recurrence > @item.pledged
            %p= raw "This experiment is proposed to meet multiple times. At Temporary, multi-day experiments cost Temps for each day it meets, with a 10% discount applied to each successive day (until it gets down to 20#{tsign}, the minimum cost in Temps)."
            
            - if @item.intended_sessions == 0
              %p This proposal does not specify how many times it will meet, so it will continue indefinitely.
              %p
                - unless @item.instances.published.empty?
                  This experiment has already happened (or been scheduled to happen)
                  = pluralize(@item.instances.published.size, 'time') + "."
                There are currently enough Temps pledged 
                = raw "(#{@item.remaining_pledges}#{tsign})"
                to schedule
                = pluralize(@item.number_that_can_be_scheduled.to_s, @item.published_instances == 0 ? 'meeting' : 'more meeting') + "."
                - if @item.number_that_can_be_scheduled == 0
                  This proposal needs 
                  = raw "#{@item.needed_for_next - @item.remaining_pledges} more #{tsign}"
                  = "pledged to happen#{@item.published_instances > 0 ? ' again.' : '.'}"
            - else
              %p
                This experiment proposes to meet  
                = @item.intended_sessions.to_s
                times. 
              %p
                = raw "#{@item.needed_for_next.to_s}#{tsign} are needed to scheduled the #{@item.instances.published.empty? ? 'first' : 'next'} meeting."
                - if @item.needed_for_next != @item.total_needed_with_recurrence
                  = raw "#{@item.total_needed_with_recurrence} total #{tsign} are needed to schedule all proposed meetings."
              
              %p
                There are currently enough Temps pledged 
                = raw "(#{@item.pledged}#{tsign})"
                to schedule
                = pluralize(@item.number_that_can_be_scheduled.to_s, 'meeting') + "."
        - else
          %p
            This proposal needs 
            = raw "#{@item.needed_for_next - @item.remaining_pledges} more #{tsign}"
            to be reviewed for scheduling.
          
        / %p
        /
        /   You may pledge a maximum of
        /   = raw "#{@item.maximum_pledgeable(current_user)}#{tsign}"
        /   to this proposal.
        - if @item.pledges.map(&:user).uniq.compact.size < 2
          %p 
            %em (All proposals require at least two supporters before they can be scheduled).


      - if @api_status == false
        %p We're sorry, the Biathlon API is currently offline. Please try again later.
      - elsif current_user.available_balance < 1
        %p You do not currently have any Temps available to pledge.
        - unless f.object.new_record?
          = link_to 'Delete your pledge!', [f.object.item, f.object], method: :delete, class: [:button, :small, :alert], data: {confirm: "Are you sure? Your #{tsign} will be restored to your full balance."} 
      - else
        = content_for :jquery do
          :plain
            $("#comment_input").mentionable("/users/mentions", {position: 'right'});
        %h3
          How many 
          = ENV['currency_full_name'].pluralize
          = raw"(#{tsign})"
          would you like to pledge?

        = f.input :pledge, label: "Your pledge (max. #{@item.maximum_pledgeable(current_user)}):", input_html: {required: '', :'data-validator' => 'less_than', :'data-less-than' => @item.maximum_pledgeable(current_user), type: :number}
    

        %label Any comments on your pledge?
        %p.small
          %u Tagging: 
          %br/
          %em People: type '@' followed by someone's username [eg: @Jussi, @PsychoDog]
          %br/
          %em Experiments: type '#' followed by the name of the experiment [eg: #Open]
        #comment_wrapper
          #comment_input{contenteditable: true}= f.object.new_record? ? '' : raw(f.object.comment)

        -#= f.input :content, :label => false, input_html: {:required => '', id: :comment_input_textarea}
        
        = f.input :comment, label: false,  as: :text, input_html: { id: :comment_input_textarea }
        = f.submit 'Pledge!', class: [:button]
        - unless f.object.new_record?
          = link_to 'Delete your pledge!', [f.object.item, f.object], method: :delete, class: [:button, :small, :alert, :delete_pledge], data: {confirm: raw("Are you sure? Your #{tsign} will be restored to your full balance.")}
  
= content_for :jquery do
  :plain
    Foundation.Abide.defaults.validators['less_than'] =
    function($el,required,parent) {
      // parameter 1 is jQuery selector
      if (!required) return true;
      var from = $('#pledge_pledge').attr('data-less-than');
      var to = $el.val();
      // alert('to is ' + parseInt(to) + ' and should be less than or equal to ' + parseInt(from));
      return (parseInt(to) <= parseInt(from));

    };