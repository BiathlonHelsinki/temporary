= content_for :header do
  .home_header
    = link_to image_tag('temporary_logo.png'), '/'
  .top-bar
    = render partial: 'layouts/top_bar'




.news_container
  %article.calendar{class: cycle('odd', 'even')}
    .post
      .meta
        %span.date= Time.now.strftime("%B %Y")
        = "//"
        %span
          = link_to  "Calendar",  calendar_experiments_path
        = "//"
      #calendar.small-centered
        
      = link_to 'View full calendar', calendar_experiments_path, class: [:button]
      
  - unless @sticky.empty?
    %article.sizer{class: cycle('odd', 'even')}
      .post
        .meta
          %span.date= @sticky.first.published_at.strftime('%d.%m.%Y')
          = " // "
          %span.category= @sticky.first.category_text
          = " // "
        .title= link_to @sticky.first.title, @sticky.first
        - if @sticky.first.image?
          = image_tag @sticky.first.image.url
        .body= raw @sticky.first.body
         


        
  - unless @open_day.nil?
    %article.open_day{class: cycle('odd', 'even')}
      .post
        .meta
          %span.date= @open_day.start_at.strftime('%d.%m.%Y')
          = " // "
          %span.category= link_to 'Experiments', experiments_path
          = " // "
        .title= link_to (@open_day.start_at.to_date == Time.now.to_date ? 'Current' : 'Next') + ' open day:', experiment_instance_path(@open_day.experiment, @open_day)
        = link_to experiment_instance_path(@open_day.experiment, @open_day) do
          .dates.text-center
            .month= l @open_day.start_at, format: "%B"
            .days
              .day= @open_day.start_at.day
              .times= @open_day.start_at.strftime("%H:%M") + " - " + @open_day.end_at.strftime("%H:%M")
        .body= raw simple_format(@open_day.description)

  - unless @sticky.size < 2        
    - @sticky.drop(1).each do |post|
      %article{class: cycle('odd', 'even')}
        .post
          .meta
            %span.date= post.published_at.strftime('%d.%m.%Y')
            = " // "
            %span.category= post.category_text
            = " // "
          .title= link_to post.title, post
          - if post.image?
            = image_tag post.image.url.gsub('development', 'production')
          .body= raw post.body
          

                

  

    
  - @news.each do |post|
    %article{class: cycle('odd', 'even')}
      .post
        .meta
          %span.date= post.published_at.strftime('%d.%m.%Y')
          = " // "
          %span.category= post.category_text
          = " // "
        .title= link_to post.title, post
        - if post.image?
          = image_tag post.image.url.gsub('development', 'production')
        .body= raw post.body

  - unless @upcoming.empty?
    - @upcoming.each do |exp|
      %article.experiment_front{class: cycle('odd', 'even')}
        .post
          .meta
            %span.date= date_range(exp.start_at, exp.end_at)
            = "//"
            %span
              = "Experiment "
              = "##{exp.sequence}"
            = "//"
          
          .title= link_to exp.name, [exp.experiment, exp]
          - if exp.image?
            %p= image_tag exp.image.url(:medium).gsub('development', 'production')
          - elsif exp.experiment.image?
            %p= image_tag exp.experiment.image.url(:medium).gsub('development', 'production')
        
          .body
            = truncate_html exp.description, length: 500
            = link_to 'Read more...', [exp.experiment, exp], class: [:button]
            
  - unless @recent_proposals.empty?
    - @recent_proposals.each do |prop|
      %article.proposal{class: cycle('odd', 'even')}
        .post
          .meta
            %span.date= prop.created_at.strftime('%d.%m.%Y')
            = " // "
            %span.category Proposals
            = " // "
          .title= link_to prop.name, prop
          - unless prop.images.empty?
            %p= image_tag prop.images.first.image.url(:medium).gsub('development', 'production')
          .proposed_by= raw "Proposed by #{link_to prop.user.display_name, prop.user}"
          .pledge_count
            = raw "Currently pledged: #{prop.pledged.to_s}#{tsign}"
          .needed
            - if prop.has_enough?
              - if prop.scheduled?
                = "Scheduled!"
              - else
                = "Will be considered at next orgaisational meeting"
                
            - else
              = raw "#{@current_rate - prop.pledged}#{tsign} still needed"
            
          .body
            %big= raw "&ldquo;"
            = truncate_html prop.short_description, length: 300
            %big= raw "&rdquo;"
            
= content_for :jquery do
  :plain
    $('#calendar').fullCalendar({
      editable: true,
      header: {
        left: 'prev,next today',
        center: 'title',
        right: 'month,agendaWeek,agendaDay'
      },
      defaultView: 'month',
      contentHeight: '400px',
      lang: '#{I18n.locale.to_s}',
      contentHeight: 'auto',
      firstDay: 1,
      fixedWeekCount: false,
      slotMinutes: 30,
      eventSources: [
        {
          url: '/experiments/calendar.json', 
          complete: function() {
            $grid.masonry('layout');
          }
        }
      ],
      displayEventEnd: {
        month: true,
        basicWeek: true,
        "default": true
      },
      timeFormat: 'H:mm',
      dragOpacity: "0.5",
      eventDrop: function(event, dayDelta, minuteDelta, allDay, revertFunc) {
        return updateEvent(event);
      },
      eventResize: function(event, dayDelta, minuteDelta, revertFunc) {
        return updateEvent(event);
      }
    });


    var updateEvent = function(the_event) {

    return $.update("/experiments/calendar/" + the_event.id, {
      event: {
        title: the_event.title,
        starts_at: "" + the_event.start,
        ends_at: "" + the_event.end,
        description: the_event.description
        }
      });
     
    };
    var $grid = $('.news_container').masonry({
      // options...
      itemSelector: 'article',
      columnWidth: 'article.sizer',
      percentPosition: true
    });
    $grid.imagesLoaded().progress( function() {
      $grid.masonry('layout');
    });
    