= content_for :header do
  -#.home_header
  = link_to image_tag('temporary_logo.png'), '/', class: :logo
  = render partial: 'layouts/open_or_closed'
  .top-bar
    = render partial: 'layouts/top_bar'


- unless user_signed_in?
  .front_blurb_stripe
    .inner
      .row.expanded
        .small-12.medium-9.columns.medium-centered
          = t(:temporary_is_open_blurb) 
          = link_to t(:come_and_visit), experiment_path('open-days')

      .row.expanded
        .small-12.medium-9.columns.medium-centered
          %br/
          = raw t(:evenings_and_weekends, link: link_to(t(:experiments), experiments_path)) 

          = link_to t(:find_out_more), page_path('how-does-it-work')

.news_container
  %article.calendar{class: cycle('odd', 'even')}
    .post
      .meta
        %span.date= Time.now.strftime("%B %Y")
        = "//"
        %span
          = link_to t(:calendar),  calendar_experiments_path
        = "//"
      #calendar.small-centered
        
      = link_to t(:view_full_calendar), calendar_experiments_path, class: [:button]
      
  - unless @sticky.empty?
    %article.sizer{class: cycle('odd', 'even')}
      .post
        .meta
          %span.date= @sticky.first.published_at.strftime('%d.%m.%Y')
          = " // "
          %span.category= @sticky.first.category_text
          = " // "
        .title= link_to @sticky.first.title, @sticky.first
        - if @sticky.first.image?
          = image_tag @sticky.first.image.url
        .body= raw @sticky.first.body
         


        
  - unless @open_day.nil?
    - cache ['open_day_front', @open_day.start_at.strftime('%d.%m.%Y')] do 
      %article.open_day{class: cycle('odd', 'even')}
        .post
          .meta
            %span.date= @open_day.start_at.strftime('%d.%m.%Y')
            = " // "
            %span.category= link_to t(:experiments), experiments_path
            = " // "
          .title= link_to (@open_day.start_at.to_date == Time.now.to_date ? 'Current' : 'Next') + ' open day:', experiment_instance_path(@open_day.experiment, @open_day)
          = link_to experiment_instance_path(@open_day.experiment, @open_day) do
            .dates.text-center
              .month= l @open_day.start_at, format: "%B"
              .days
                .day= @open_day.start_at.day
                .times= @open_day.start_at.strftime("%H:%M") + " - " + @open_day.end_at.strftime("%H:%M")
          .body= raw simple_format(@open_day.description)

  - unless @sticky.size < 2        
    - @sticky.drop(1).each do |post|
      %article{class: cycle('odd', 'even')}
        .post
          .meta
            %span.date= post.published_at.strftime('%d.%m.%Y')
            = " // "
            %span.category= post.category_text
            = " // "
          .title= link_to post.title, post
          - if post.image?
            = image_tag post.image.url
          .body= raw post.body

    
  - @feed.each do |post|
    - cache ["front_post", post, current_user] do
      - if post.class == Email
      
        %article{class: cycle('odd', 'even')}
          .post{class: post.class.to_s.downcase}
            .meta
              %span.date= post.sent_at.strftime('%d.%m.%Y')
              = " // "
              %span.category= t(:announcements)
              = " // "
            .title= link_to post.subject, "/announcements/#{post.slug}"
            .body
              = raw truncate_html(sanitize(post.body, tags: %w{a b bold strong i em br p blockquote img}, attributes: %w{src href}), length: 750)
              = link_to 'Read more...', "/announcements/#{post.slug}", class: [:button]

      - if post.class == Comment
        %article{class: cycle('odd', 'even')}
          .post.comment
            .meta
              %span.date= post.feed_date.strftime('%d.%m.%Y')
              = " // "
              %span.category= post.item.class.to_s + " news"
              = " // "
            .title= link_to post.item.name, post.item
            - if post.image?
              = image_tag post.image.url
            .body
              .attribution
                = raw t(:person_says, link: link_to(post.user.display_name, post.user))
                  
              .content
                %span.quote= raw "&ldquo;"
                = raw post.content_linked
         

          
      - if post.class == Post
        %article{class: cycle('odd', 'even')}
          .post
            .meta
              %span.date= post.published_at.strftime('%d.%m.%Y')
              = " // "
              %span.category= post.category_text
              = " // "
            .title= link_to post.title, post
            - if post.image?
              = image_tag post.image.url.gsub('development', 'production')
            .body= raw post.body

      - if post.class == Instance
        %article.experiment_front{class: cycle('odd', 'even')}
          .post
            .meta
              %span.date= date_range(post.start_at, post.end_at)
              = "//"
              %span
                = t(:experiment)
                = "##{post.sequence}"
              = "//"
          
            .title= link_to post.name, [post.experiment, post]
            - if post.image?
              .image= image_tag post.image.url(:medium)
            - elsif post.experiment.image?
              %p= image_tag post.experiment.image.url(:medium)
            - if post.in_future?
              - if post.request_registration == true
                .rsvp
                  = link_to t(:you_must_register_for_this_experiment),[post.experiment, post]
              - else
                .rsvp
                  - if user_signed_in?
                    - if current_user.rsvpd?(post)
                      You are going!
                    - else
                      Are you going?
                      = link_to t(:rsvp), rsvp_experiment_instance_path(post.experiment, post), method: :post, class: [:button]
                  - else
                    Are you going?
                    = link_to t(:rsvp),  [post.experiment, post], class: [:button]
                - unless post.rsvps.empty?
                  .participants
                    = pluralize(post.rsvps.size, 'person') +  (post.rsvps.size == 1 ? ' has ' : ' have ' ) + 'RSVPd'
            .body
              = truncate_html post.description, length: 500
              = link_to 'Read more...', [post.experiment, post], class: [:button]
            
      - if post.class == Proposal
        %article.proposal{class: cycle('odd', 'even')}
          .post
            .meta
              %span.date= post.created_at.strftime('%d.%m.%Y')
              = " // "
              %span.category Proposals
              = " // "
            .title= link_to post.name, post
            - unless post.images.empty?
              %p= image_tag post.images.first.image.url(:medium)
            .proposed_by= raw t(:proposed_by_person, link: link_to(post.user.display_name, post.user))
            .pledge_count
              = t(:currently_pledged)
              = raw "#{post.pledged.to_s}#{tsign}"
            .needed

              - if post.has_enough?
                - if post.scheduled?
                  = t(:scheduled)
                - else
                  = t(:will_be_reviewed)
                  %br/
                = link_to t(:view), post, class: [:button, :small]
              - else
                = raw t(:still_needed, amount: raw("#{post.needed_for_next - post.remaining_pledges}#{tsign}"))
                %br/
                = link_to t(:pledge), post, class: [:button, :small]
            .body
              %span.quote= raw "&ldquo;"
              = truncate_html post.short_description, length: 300

            
= content_for :jquery do
  :plain
    $('#calendar').fullCalendar({
      editable: true,
      header: {
        left: 'prev,next today',
        center: 'title',
        right: 'month,agendaWeek,agendaDay'
      },
      defaultView: 'month',
      contentHeight: '400px',
      lang: '#{I18n.locale.to_s}',
      contentHeight: 'auto',
      firstDay: 1,
      fixedWeekCount: false,
      slotMinutes: 30,
      eventSources: [
        {
          url: '/experiments/calendar.json', 
          complete: function() {
            $grid.masonry('layout');
          }
        }
      ],
      displayEventEnd: {
        month: true,
        basicWeek: true,
        "default": true
      },
      timeFormat: 'H:mm',
      dragOpacity: "0.5",
      eventDrop: function(event, dayDelta, minuteDelta, allDay, revertFunc) {
        return updateEvent(event);
      },
      eventResize: function(event, dayDelta, minuteDelta, revertFunc) {
        return updateEvent(event);
      },
      eventAfterRender: function(event, element,view) {
        if (moment(event.start).format('YYYY-M-D') == moment(new Date()).format('YYYY-M-D')) {
          element.parent().addClass('fc-today');
        } 
      }
    });


    var updateEvent = function(the_event) {

    return $.update("/experiments/calendar/" + the_event.id, {
      event: {
        title: the_event.title,
        starts_at: "" + the_event.start,
        ends_at: "" + the_event.end,
        description: the_event.description
        }
      });
     
    };
    var $grid = $('.news_container').masonry({
      // options...
      itemSelector: 'article',
      columnWidth: 'article.sizer',
      percentPosition: true
    });
    $grid.imagesLoaded().progress( function() {
      $grid.masonry('layout');
    });
    