.proposal_detail
  .row.expanded
    .small-12.medium-8.columns
      %h1= "PROPOSAL:Â #{@proposal.name}"
      .proposed_by= raw "Proposed by #{link_to @proposal.user.display_name, @proposal.user, target: :_blank}"
    .small-10.medium-4.columns.pledge_info
      .box
        - if @proposal.scheduled 
          .yellow Scheduled!
        - else
          - if @proposal.has_enough?
            .yellow  Pending scheduling!
          - else
            = link_to  new_proposal_pledge_path(@proposal) do
              .grey
                %span
                  = raw(@proposal.pledged.to_s + tsign)
                  pledged
                .occluded= raw("Pledge #{tsign}!")
                
          / - @proposal.instances.each do |instance|
          /   = link_to instance.name, instance

      - unless @proposal.pledges.empty?
        .pledges
          %p
            = raw "#{@proposal.pledged.to_s}#{tsign} "
            pledged by:
            %small= @proposal.pledges.map(&:user).map(&:username).join(', ')
      .pledge_data
        %p
          - if @proposal.has_enough?
            This proposal will be reviewed at Temporary's next organisational meeting:
            - if @next_meeting.nil?
              %em none currently scheduled
            - else
              = link_to @next_meeting.name, experiment_instance_path(@next_meeting.experiment, @next_meeting), target: :_blank
            
          - else
            %small 
              Needed to be considered for scheduling:
              = raw(@current_rate.to_s + tsign)
            total, from at least two users
        - if @proposal.has_enough?
          %p You may still pledge over the requirements if you really want to show your support!
  .row.expanded
    .small-12.columns
      .details
        .title Description:
        .answer= simple_format @proposal.short_description
   
        .title Goals:
        .answer= simple_format @proposal.goals
   
        .title Timeframe
        .answer= simple_format @proposal.timeframe
    
        .title Intended participants:
        .answer= simple_format @proposal.intended_participants
      - if @proposal.images
        - @proposal.images.each do |image|
          %p= image_tag image.image.url(:medium)
  #pledges
    .row    
      .small-10.columns

  .row.expanded   
    .small-10.columns
      .pledge_panel
        - if user_signed_in?
          - if current_user.has_pledged?(@proposal)
            = raw "You pledged #{current_user.pledges.find_by(item: @proposal).pledge}#{tsign}"
          - unless @proposal.scheduled
            - if current_user.has_pledged?(@proposal)
              %br/
              = link_to 'Edit pledge', edit_proposal_pledge_path(@proposal, current_user.pledges.find_by(item: @proposal) ), class: [:button, :tiny]
            - else
              = link_to raw("Pledge #{tsign}!"), new_proposal_pledge_path(@proposal), class: [:button, :tiny]
        
  - unless @proposal.comments.empty? && @proposal.pledges.empty?


    #comments_list
      .row.expanded
        .small-12.columns
          %h1= t :discussion
        - if @proposal.discussion.size > 0
          .small-12.columns
            .comment_count= "This experiment proposal has #{pluralize(@proposal.discussion.size, 'comment')}."
      - @proposal.discussion.sort_by(&:created_at).each do |comment|
        .row.expanded
          .small-12.columns
            .entry{class: [comment.class.to_s.downcase, comment == @proposal.discussion.sort_by(&:created_at).last ? :last : false]}
              .row
                .sma11-12.medium-8.columns.end
                  .row
                    .small-2.columns
                      = link_to image_tag(comment.user.avatar.url(:box)), comment.user, target: :_blank
                    .small-10.columns
                      .comment_type
                        - if comment.class == Pledge
                          = raw "#{link_to comment.user.display_name, comment.user, target: :_blank} pledged in support of this proposal!"
                          
                        - else
                          = raw t(:user_says, :user => comment.user.display_name)
                      .date= l comment.created_at, format: :long
                      .comment_content
                        - if comment.class == Pledge
                          %em= raw t(:has_pledged, user: comment.user.username, amount: comment.pledge.to_s + tsign)
                          - if comment.user == current_user
                            = link_to 'Edit your pledge', edit_proposal_pledge_path(@proposal, comment), class: [:button, :tiny]
                        - if comment.respond_to?(:systemflag)
                          - if comment.systemflag == true
                            .system
                              %em= raw comment.content
                          - else
                            = simple_format(comment.content)
                        - else
                          = simple_format(comment.content)
                      - if comment.image?
                        = image_tag comment.image.url(:small)
                      - if comment.attachment?
                        %p= link_to t(:download) + ' ' + File.basename(URI.parse(comment.attachment.url).path), comment.attachment.url, class: [:button, :round, :tiny]
                    
                    
  - if can? :create, Comment        
    .row.expanded
      .small-12.columns
        #comment_form
          .row
            .small-12.medium-8.columns.end
              .row
                .small-2.columns
                  = image_tag current_user.avatar.url(:box)
                  %p.small= link_to t(:edit_profile), edit_admin_user_path(current_user), class: [:button, :tiny, :secondary, :round]
                .small-10.columns
                  %h3= t :what_do_you_think_about_this
                  = semantic_form_for [ @proposal,  @comment = @proposal.comments.build(user: current_user)], html: {multipart: true, :"data-abide" => '' } do |f|
                    = f.input :user_id, as: :hidden, data: {value: current_user.id}
                    = f.input :content, :label => false, input_html: { :required => ''}
                    = f.input :image, :label => t(:attach_image_to_comment)
                    = f.input :attachment, :label => t(:attach_attachment_to_comment)
                    = f.submit t(:save), :class => [:button, :round]