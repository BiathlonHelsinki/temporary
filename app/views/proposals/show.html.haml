- cache [@proposal, current_user] do
  .proposal_detail
    .row.expanded
      .small-12.medium-8.columns
        %h1= "PROPOSAL:Â #{@proposal.name}"
        .proposed_by= raw "Proposed by #{link_to @proposal.user.display_name, @proposal.user, target: :_blank}"
        - if user_signed_in?
          - if current_user.has_pledged?(@proposal)
            .my_pledge_list
              %br{clear: :all}
              %h6 Your pledges to this proposal:
              %ol.proposal_pledge_list{class: @proposal.pledges.where(user: current_user).size > 5  ? :readmore : false }
                - @proposal.pledges.where(user: current_user).each do |p|
                  %li
                    = raw "You pledged #{p.pledge.to_s}#{tsign}"
                    on
                    = l p.created_at, format: :short
                    - if p.converted?
                      %br/
                      %em
                        - unless p.extra_info.nil?
                          = p.extra_info.gsub(/\s\+\d{4}$/, '')
                        - if p.instance
                          scheduling
                          = link_to p.instance.name, experiment_instance_path(p.instance.experiment, p.instance), target: :_blank

                - if @proposal.pledges.where(user: current_user).size > 5
                  = content_for :jquery do
                    :plain
                      $('ol.readmore').readmore({
                          moreLink: '<a href="#">See more</a>', 
                          lessLink: '<a href="#">See fewer</a>'
                          });
      .small-10.medium-4.columns.pledge_info
        .box
          - if @proposal.scheduled?
            .yellow 
              - if @proposal.stopped? || (@proposal.scheduled? && !@proposal.recurs? && @proposal.instances.future.empty?)
                Completed!
              - else
                %span.pledge_box_text Scheduled!
              - if @proposal.recurs?
                - if @proposal.intended_sessions == 0 || @proposal.pledged < @proposal.total_needed_with_recurrence
                  .small= link_to 'but still taking pledges....', new_proposal_pledge_path(@proposal)
                  = content_for :jquery do
                    :plain
                      $('.pledge_info .box .yellow').mouseenter(function() {
                        $(".pledge_box_text").html('<a href="#{new_proposal_pledge_path(@proposal)}">Pledge more #{raw tsign.html_safe}!</a>');
                      }).mouseleave(function() {
                        $(".pledge_box_text").text('Scheduled!');
                      });
          - else
            - if @proposal.has_enough?
              .yellow  Pending scheduling!
            - else
              = link_to  new_proposal_pledge_path(@proposal) do
                .grey
                  %span
                    = raw(@proposal.pledged.to_s + tsign)
                    pledged
                  .occluded= raw("Pledge #{tsign}!")
                
            / - @proposal.instances.each do |instance|
            /   = link_to instance.name, instance

        - unless @proposal.pledges.empty?
          .pledges
            %p
              = raw "#{@proposal.pledged.to_s}#{tsign} "
              pledged by:
              %small= raw @proposal.pledges.map(&:user).map{|x| link_to(x.display_name, x)}.uniq.join(', ')
        .pledge_data
          %p
            - if @proposal.stopped? ||  (@proposal.scheduled? && !@proposal.recurs?)
              - if @proposal.instances.future.empty?
                = pluralize(@proposal.instances.first.experiment.instances.size, 'meeting')
                took place!
              - else
                = pluralize(@proposal.instances.first.experiment.instances.size, 'meeting') + ":"
                %br/
            - elsif (@proposal.scheduled? && @proposal.recurs?)
              Recurring experiment. Meetings:
              %br/

            - else
              - if !@proposal.has_enough?
                - if @proposal.remaining_pledges > @proposal.needed_for_next
                  - if @proposal.pledges.map(&:user).size == 1
                    This proposal needs at least one other user to pledge to it.

                %small 
                  Needed to be considered for scheduling:
                  = raw(@proposal.needed_for_next.to_s + tsign)
                  total, from at least two users
              - else
                - if !@proposal.scheduled?
                  This proposal will be reviewed at Temporary's next organisational meeting:
                  - if @next_meeting.nil?
                    %em none currently scheduled
                  - else
                    = link_to @next_meeting.name, experiment_instance_path(@next_meeting.experiment, @next_meeting), target: :_blank
                - else
                  %strong Come to this experiment:
            - unless @proposal.instances.published.empty?
              %br/
              - if @proposal.instances.first.experiment.instances.published.size > 6
                = @proposal.instances.first.experiment.instances.published.size.to_s
                meetings. 
                = link_to 'See all...', @proposal.instances.first.experiment
              - else 
                - @proposal.instances.first.experiment.instances.published.sort_by(&:start_at).each do |k|
                  = link_to k.name, experiment_instance_path(k.experiment, k)
                  %br/
                  %small
                    - unless k.in_future?
                      already happened: 
                    %em= date_range(k.start_at, k.end_at)
                  %br/
                  %br/



    .row.expanded
      .small-12.columns
        .details
          .title Description:
          .answer
            = simple_format @proposal.short_description
            - if @proposal.images
              .row.expanded.proposal_images
              
                - @proposal.images.each do |image|
                  .small-12.medium-12.large-6.columns= image_tag image.image.url(:medium)
              
          .title Goals:
          .answer= simple_format @proposal.goals
   
        
          .title Timeframe
          .answer= simple_format @proposal.timeframe
        
          .title How often?
          .answer
            - if @proposal.recurrence == 1
              Happens only once
            - if @proposal.recurrence == 2
              = @proposal.intended_sessions == 0  ? 'Multiple meetings proposed' : @proposal.intended_sessions.to_s + " meetings proposed"
            - if @proposal.recurrence == 3
              Happens regularly
              - unless @proposal.intended_sessions == 0
                %p
                  = @proposal.intended_sessions.to_s + " meetings proposed"
    
          .title Intended participants:
          .answer= simple_format @proposal.intended_participants

    #pledges
      .row    
        .small-10.columns

    .row.expanded   
      .small-10.columns
        .pledge_panel
          - if user_signed_in?
            - if current_user.has_pledged?(@proposal)
              = raw "You pledged #{current_user.pledges.find_by(item: @proposal).pledge}#{tsign}"
            - unless @proposal.scheduled?
              - if current_user.has_pledged?(@proposal)
                %br/
                = link_to 'Edit pledge', edit_proposal_pledge_path(@proposal, current_user.pledges.find_by(item: @proposal) ), class: [:button, :tiny]
              - else
                = link_to raw("Pledge #{tsign}!"), new_proposal_pledge_path(@proposal), class: [:button, :tiny]
            - if current_user == @proposal.user || current_user.has_role?(:admin)
              %br/
              = link_to 'Edit proposal', edit_proposal_path(@proposal), class: [:button, :tiny], style: 'float: left; font-size: 0.7em; margin: 0.5rem 0;'  
    - unless @proposal.comments.empty? && @proposal.pledges.empty?


      #comments_list
        .row.expanded
          .small-12.columns
            %h1= t :discussion
          - if @proposal.discussion.size > 0
            .small-12.columns
              .comment_count= "This experiment proposal has #{pluralize(@proposal.discussion.size, 'comment')}."
        - @proposal.discussion.sort_by(&:created_at).each do |comment|
          .row.expanded
            .small-12.columns
              .entry{class: [comment.class.to_s.downcase, comment == @proposal.discussion.sort_by(&:created_at).last ? :last : false]}
                .row
                  .sma11-12.medium-8.columns.end
                    .row
                      .small-2.columns
                        = link_to image_tag(comment.user.avatar.url(:box)), comment.user, target: :_blank, class: :comment_avatar
                        - if comment.class == Comment
                          - if user_signed_in?
                            - if can? :destroy, comment
                              = link_to 'Delete this comment', comment, method: :delete, data: {confirm: 'Are you sure? If someone has replied to this comment and you delete it, it might be confusing.'}, class: [:button, :tiny, :secondary]
                      .small-10.columns
                        .comment_type
                          - if comment.class == Pledge
                            = raw "#{link_to comment.user.display_name, comment.user, target: :_blank} pledged in support of this proposal!"
                          
                          - else
                            = raw t(:user_says, :user => comment.user.display_name)
                        .date= l comment.created_at, format: :long
                        .comment_content
                          - if comment.class == Pledge
                            %em= raw t(:has_pledged, user: comment.user.username, amount: comment.pledge.to_s + tsign)
                            %br/

                            %br/
                            - unless comment.extra_info.blank?
                              .extra_info= raw comment.extra_info

                            - if comment.user == current_user && comment.converted != 1
                              = link_to 'Edit your pledge', edit_proposal_pledge_path(@proposal, comment), class: [:button, :tiny]
                          - if comment.respond_to?(:systemflag)
                            - if comment.systemflag == true
                              .system
                                %em= raw comment.content_linked
                            - else
                              = simple_format(comment.content_linked)
                          - else
                            = simple_format(comment.content_linked)
                        - if comment.image?
                          = image_tag comment.image.url(:small)
                        - if comment.attachment?
                          %p= link_to t(:download) + ' ' + File.basename(URI.parse(comment.attachment.url).path), comment.attachment.url, class: [:button, :round, :tiny]
                    
    - if user_signed_in?
    
      - if can? :create, Comment
        = content_for :jquery do
          :plain
            $("#comment_input").mentionable("/users/mentions", {position: 'right'});
          
        .row.expanded
          .small-12.columns
            #comment_form
              .row
                .small-12.medium-8.columns.end
                  .row
                    .small-2.columns
                      = image_tag current_user.avatar.url(:box)
                    
                      %p.small= link_to t(:edit_profile), edit_user_path(current_user), class: [:button, :tiny, :secondary, :round]
                    .small-10.columns
                      %h3
                        = t :what_do_you_think_about_this
                      %p.small
                        %u Tagging: 
                        %br/
                        %em People: type '@' followed by someone's username [eg: @Jussi, @PsychoDog]
                        %br/
                        %em Experiments: type '#' followed by the name of the experiment [eg: #Open] 
                      = semantic_form_for [ @proposal,  @comment = @proposal.comments.build(user: current_user)], html: {onSubmit: "return getContent();", multipart: true, :"data-abide" => '' } do |f|
                        = f.input :user_id, as: :hidden, data: {value: current_user.id}
                        #comment_wrapper
                          #comment_input{contenteditable: true}

                        = f.input :content, :label => false, input_html: {:required => '', id: :comment_input_textarea}
                        = f.input :image, :label => t(:attach_image_to_comment)
                        = f.input :attachment, :label => t(:attach_attachment_to_comment)
                        = f.submit t(:save), :class => [:button, :round]
    - else
      .row.expanded
        .small-12.columns                
          %h3
            = link_to 'Log in', '/users/sign_in'
            to comment on this proposal.
