
.proposal_detail
  .row.expanded
    .small-12.medium-8.columns
      %h1
        = t(:proposal) + ":"
        = @proposal.name
      .proposed_by= raw t(:proposed_by_person, link: link_to(@proposal.user.display_name, @proposal.user, target: :_blank))
      - if user_signed_in?
        - if current_user.has_pledged?(@proposal)
          .my_pledge_list
            %br{clear: :all}
            %h6= t(:your_pledges_to_this_proposal)
            %ol.proposal_pledge_list{class: @proposal.pledges.where(user: current_user).size > 5  ? :readmore : false }
              - @proposal.pledges.where(user: current_user).each do |p|
                %li
                  = raw t(:you_pledged_date, amount: p.pledge.to_s + tsign, date: l(p.created_at, format: :short))
                  - if p.converted?
                    %br/
                    %em
                      - unless p.extra_info.nil?
                        = p.extra_info.gsub(/\s\+\d{4}$/, '')
                      - if p.instance
                        = t(:scheduling)
                        = link_to p.instance.name, experiment_instance_path(p.instance.experiment, p.instance), target: :_blank

              - if @proposal.pledges.where(user: current_user).size > 5
                = content_for :jquery do
                  :plain
                    $('ol.readmore').readmore({
                        moreLink: '<a href="#">See more</a>', 
                        lessLink: '<a href="#">See fewer</a>'
                        });
    .small-10.medium-4.columns.pledge_info
      .box
        - if @proposal.is_valid?
          - if @proposal.scheduled?
            .yellow 
              - if @proposal.stopped? || (@proposal.scheduled? && !@proposal.recurs? && @proposal.instances.future.empty?)
                = t(:completed)
              - else
                %span.pledge_box_text Scheduled!
              - if @proposal.recurs?
                - if @proposal.intended_sessions == 0 || @proposal.pledged < @proposal.total_needed_with_recurrence
                  .small= link_to t(:but_still_taking_pledges)
                  = content_for :jquery do
                    :plain
                      $('.pledge_info .box .yellow').mouseenter(function() {
                        $(".pledge_box_text").html('<a href="#{new_proposal_pledge_path(@proposal)}">Pledge more #{raw tsign.html_safe}!</a>');
                      }).mouseleave(function() {
                        $(".pledge_box_text").text('Scheduled!');
                      });
          - else
            - if @proposal.has_enough?
              .yellow= t :pending_scheduling
            - else
              = link_to  new_proposal_pledge_path(@proposal) do
                .grey
                  %span
                    = raw(@proposal.pledged.to_s + tsign)
                    pledged
                  .occluded= raw t(:pledge_temps)
              
            / - @proposal.instances.each do |instance|
            /   = link_to instance.name, instance
        - else
          .grey.invalid
            Invalid
            .small= link_to t(:see_comments_for_reason), 'javascript:$(document).scrollTo(".comment.last", 800);'
            

      - unless @proposal.pledges.empty?
        .pledges
          %p
            = raw t(:full_pledged_by, amount: @proposal.pledged.to_s + tsign )

            %small= raw @proposal.pledges.map(&:user).map{|x| link_to(x.display_name, x)}.uniq.join(', ')
      .pledge_data
        %p

          - if @proposal.stopped? ||  (@proposal.scheduled? && !@proposal.recurs?) 
            - if @proposal.is_valid?
              - if @proposal.instances.future.empty?
                = t(:meetings_took_place_past, amount: t(:meeting, count: @proposal.instances.first.experiment.instances.size))

              - else
                = @proposal.instances.first.experiment.instances.size
                = t(:meeting, count: @proposal.instances.first.experiment.instances.size) + ": "

          - elsif (@proposal.scheduled? && @proposal.recurs?)
            = t :recurring_experiment_meetings
            %br/

          - else
            - if !@proposal.has_enough?
              - if @proposal.remaining_pledges > @proposal.needed_for_next
                - if @proposal.pledges.map(&:user).size == 1
                  = t :this_proposal_needs_at_least_one_other_user_to_pledge_to_it 
                  

              %small
                = t :needed_to_be_considered_for_scheduling
                = raw t(:needed_total_from_users, amount: @proposal.needed_for_next.to_s + tsign)

            - else
              - if !@proposal.scheduled?
                = t :review_at_next_meeting
                
                - if @next_meeting.nil?
                  %em= t :none_currently_scheduled
                - else
                  = link_to @next_meeting.name, experiment_instance_path(@next_meeting.experiment, @next_meeting), target: :_blank
              - else
                %strong= t :come_to_this_experiment
          - unless @proposal.instances.published.empty?
            %br/
            - if @proposal.instances.first.experiment.instances.published.size > 6
              = @proposal.instances.first.experiment.instances.published.size.to_s
              meetings. 
              = link_to t(:see_all), @proposal.instances.first.experiment
            - else 
              - @proposal.instances.first.experiment.instances.published.sort_by(&:start_at).each do |k|
                = link_to k.name, experiment_instance_path(k.experiment, k)
                %br/
                %small
                  - unless k.in_future?
                    = t :already_happened
                  %em= date_range(k.start_at, k.end_at)
                %br/
                %br/



  .row.expanded
    .small-12.columns
      .details
        .title= t(:description) + ":"
        .answer
          = simple_format @proposal.short_description
          - if @proposal.images
            .row.expanded.proposal_images
            
              - @proposal.images.each do |image|
                .small-12.medium-12.large-6.columns= image_tag image.image.url(:medium)
            
        .title= t(:goals) + ":"
        .answer= simple_format @proposal.goals
 
      
        .title= t(:timeframe) + ':'
        .answer= simple_format @proposal.timeframe
      
        .title= t(:how_often) + ":"
        .answer
          - if @proposal.recurrence == 1
            = t :happens_only_once
          - if @proposal.recurrence == 2
            = @proposal.intended_sessions == 0  ? t(:multiple_meetings_proposed) : t(:x_meetings_proposed, amount: @proposal.intended_sessions)
          - if @proposal.recurrence == 3
            = t :happens_regularly
            - unless @proposal.intended_sessions == 0
              %p= t(:x_meetings_proposed, amount: @proposal.intended_sessions)

  
        .title= t(:intended_participants) + ":"
        .answer= simple_format @proposal.intended_participants

  #pledges
    .row    
      .small-10.columns
  - if @proposal.is_valid?
    .row.expanded   
      .small-10.columns
        .pledge_panel
          - if user_signed_in?
            - if current_user.has_pledged?(@proposal)
              = raw t(:you_pledged, amount: current_user.pledges.where(item: @proposal).sum(&:pledge).to_s + tsign)
            - unless @proposal.scheduled?
              - if current_user.has_pledged?(@proposal)
                %br/
                = link_to t(:edit_pledge), edit_proposal_pledge_path(@proposal, current_user.pledges.find_by(item: @proposal) ), class: [:button, :tiny]
              - else
                = link_to raw(t(:pledge_temps)), new_proposal_pledge_path(@proposal), class: [:button, :tiny]
            - if current_user == @proposal.user || current_user.has_role?(:admin)
              %br/
              = link_to t(:edit_proposal), edit_proposal_path(@proposal), class: [:button, :tiny], style: 'float: left; font-size: 0.7em; margin: 0.5rem 0;'  
            
  - unless @proposal.comments.empty? && @proposal.pledges.empty?


    #comments_list
      .row.expanded
        .small-12.columns
          %h1= t :discussion
        - if @proposal.discussion.size > 0
          .small-12.columns
            .comment_count
              - if @proposal.is_valid?
                = t(:this_proposal_has_x_comments, comments: t(:comment, count: @proposal.discussion.size))
              - else
                = t(:this_proposal_had_x_comments, comments: pluralize(@proposal.discussion.size, t(:comment)))
        - if user_signed_in?
          .small-12.columns.notification_form
            .notification_question= t(:receive_email_notifications_question_proposal)
  
            = semantic_form_for [@proposal, current_user, @proposal.notifications.by_user(current_user.id).empty? ? @proposal.notifications.build : @proposal.notifications.by_user(current_user.id).first], remote: true do |f|
              %small= t(:send_me_an_email_when_there_is_a_new, email_address: current_user.email)
              %br/
              = f.input :pledges, label: t(:pledge, count: 1)
              = f.input :comments, label: t(:comment, count: 1)
              
              - label = capture do
                = fa_icon 'envelope'
                = t(:update_email_preferences)
              = f.button label, type: :submit, class: [:button, :small]
            #notifications_result
        
                        
      - @proposal.discussion.sort_by(&:created_at).each do |comment|
        .row.expanded
          .small-12.columns
            .entry{class: [comment.class.to_s.downcase, comment == @proposal.discussion.sort_by(&:created_at).last ? :last : false]}
              .row
                .sma11-12.medium-8.columns.end
                  .row
                    .small-2.columns
                      = link_to image_tag(comment.user.avatar.url(:box)), comment.user, target: :_blank, class: :comment_avatar
                      - if comment.class == Comment
                        - if user_signed_in?
                          - if can? :destroy, comment
                            = link_to t(:delete_this_comment), comment, method: :delete, data: {confirm: t(:are_you_sure_delete_comment)}, class: [:button, :tiny, :secondary]
                    .small-10.columns
                      .comment_type
                        - if comment.class == Pledge
                          = raw t(:pledged_in_support_of_this_proposal, user: link_to( comment.user.display_name, comment.user, target: :_blank))
                        
                        - else
                          = raw t(:user_says, :user => comment.user.display_name)
                      .date= l comment.created_at, format: :long
                      .comment_content
                        - if comment.class == Pledge
                          %em= raw t(:has_pledged, user: comment.user.username, amount: comment.pledge.to_s + tsign)
                          %br/

                          %br/
                          - unless comment.extra_info.blank?
                            .extra_info= raw comment.extra_info

                          - if comment.user == current_user && comment.converted != 1
                            = link_to t(:edit_your_pledge),edit_proposal_pledge_path(@proposal, comment), class: [:button, :tiny]
                        - if comment.respond_to?(:systemflag)
                          - if comment.systemflag == true
                            .system
                              %em= raw comment.content_linked
                          - else
                            = simple_format(comment.content_linked)
                        - else
                          = simple_format(comment.content_linked)
                      - if comment.image?
                        = image_tag comment.image.url(:small)
                      - if comment.attachment?
                        %p= link_to t(:download) + ' ' + File.basename(URI.parse(comment.attachment.url).path), comment.attachment.url, class: [:button, :round, :tiny]
  - if @proposal.is_valid?                
    - if user_signed_in?
  
      - if can? :create, Comment
        = content_for :jquery do
          :plain
            $("#comment_input").mentionable("/users/mentions", {position: 'right'});
        
        .row.expanded
          .small-12.columns
            #comment_form
              .row
                .small-12.medium-8.columns.end
                  .row
                    .small-2.columns
                      = image_tag current_user.avatar.url(:box)
                  
                      %p.small= link_to t(:edit_profile), edit_user_path(current_user), class: [:button, :tiny, :secondary, :round]
                    .small-10.columns
                      %h3
                        = t :what_do_you_think_about_this
                      %p.small
                        %u= t(:tagging) + ":"
                        %br/
                        %em= t(:tagging_people) 
                        %br/
                        %em= t(:tagging_experiments) 
                      = semantic_form_for [ @proposal,  @comment = @proposal.comments.build(user: current_user)], html: {onSubmit: "return getContent();", multipart: true, :"data-abide" => '' } do |f|
                        = f.input :user_id, as: :hidden, data: {value: current_user.id}
                        #comment_wrapper
                          #comment_input{contenteditable: true}

                        = f.input :content, :label => false, input_html: {:required => '', id: :comment_input_textarea}
                        = f.input :image, :label => t(:attach_image_to_comment)
                        = f.input :attachment, :label => t(:attach_attachment_to_comment)
                        = f.submit t(:save), :class => [:button, :round]
    - else
      .row.expanded
        .small-12.columns                
          %h3
            = link_to 'Log in', '/users/sign_in'
            to comment on this proposal.
