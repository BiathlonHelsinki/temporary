.submenu
  %ul.menu
    %li{class: (params[:filter] == false || params[:filter].nil?) && controller.action_name == 'index' ? :active : false}= link_to "All active proposals (#{Proposal.active.size.to_s})", proposals_path
    %li{class: params[:filter] == 'needs_support' ? :active : false}= link_to raw("Needs more #{tsign} (#{@needs_support_count.to_s})"), proposals_path(filter: params[:filter] == 'needs_support' ? false : :needs_support)
    %li{class: params[:filter] == 'scheduled' ? :active : false}= link_to "Scheduled (#{@scheduled_count.to_s})", proposals_path(filter: params[:filter] == 'scheduled' ? false :  :scheduled)
    %li{class: params[:filter] == 'review' ? :active : false}= link_to "Awaiting review (#{@review_count.to_s})", proposals_path(filter: params[:filter] == 'review' ? false : :review)
    %li{class: controller.action_name == 'archived' ? :active : false}= link_to "Archived (#{Proposal.archived.size.to_s})", archived_proposals_path
.proposals_index

  .row.expanded
    .small-12.medium-6.columns.medium-uncentered
      %h1 
        - if @proposals.first.stopped == true
          Archived
        Proposals

  - if user_signed_in?
    .row.expanded
      .small-8.columns.small-centered.medium-uncentered.medium-12
        - if current_user.email =~ /^change@me/ 
          %p You must enter a valid email address to propose (or pledge towards) an experiment.
        - else
          = link_to 'Propose experiment!', new_proposal_path, class: [:button, :large]
  - else
    .row.expanded
      .small-8.columns.small-centered.medium-uncentered.medium-12
        %p Log in (or join!) to propose an experiment.
    
  .row.expanded
    .small-8.columns.small-centered.medium-uncentered.medium-12
      %p
         
        = raw tsign
        needed for an experiment to begin:
        = raw (@current_rate.to_s + tsign)
        %small= link_to "(why?)", "/pages/how-does-it-work#number_5", target: :_blank
  %table.proposals
    %thead
      %tr
        %th Name
        %th Proposed by
        %th When?
        %th.pledged
          Pledged 

        %th Status
    %tbody
      - @proposals.each do |proposal|
        - cache [proposal, current_user] do
          %tr
            %td.name.sub
              = link_to proposal.name, proposal
              = link_to fa_icon('info-circle'), '#', :"data-open" => "proposal_#{proposal.id.to_s}", class: 'hide-for-small-only'

            %td
              .avatar= link_to image_tag(proposal.user.avatar.url(:thumb).gsub(/development/, 'production')), proposal.user
              .user= link_to proposal.user.display_name, proposal.user
              - if user_signed_in?
                - if current_user == proposal.user || current_user.has_role?(:admin)
                  %br/
                  = link_to 'Edit proposal', edit_proposal_path(proposal), class: [:button, :tiny], style: 'float: left; font-size: 0.7em; margin: 0.5rem 0;'
            %td
              .recurrence
                - if proposal.recurrence == 2
                  = proposal.intended_sessions == 0  ? 'Multiple meetings proposed' : proposal.intended_sessions.to_s + " meetings proposed"
                - if proposal.recurrence == 3
                  Happens regularly
                  - unless proposal.intended_sessions == 0
                    %p
                      = proposal.intended_sessions.to_s + " meetings proposed"
                - if proposal.scheduled?    
                  - if proposal.recurrence != 1
                    - if proposal.instances.first.experiment.instances.future.or(proposal.instances.first.experiment.instances.current).empty?
                      - if proposal.stopped == true
                        %p Experiment completed
                      - else
                        %p None currently upcoming
                    - else
                      %p
                        - if proposal.instances.first.experiment.instances.future.size > 1
                          = link_to fa_icon('calendar'), '#', onclick: "javascript:$('ul#upcoming_events_#{proposal.id.to_s}').slideToggle();return false;"
                        = proposal.instances.first.experiment.instances.future.size.to_s
                        upcoming, next at:


                      %ul
                        - a = proposal.instances.first.experiment.instances.future.or(proposal.instances.first.experiment.instances.current).order(:start_at).first
                        %li
                          = link_to a.name, experiment_instance_path(a.experiment, a)
                          %br/
                          %em= date_range(a.start_at, a.end_at)
                      
                    
                      %ul.hidden_list{id: "upcoming_events_#{proposal.id.to_s}"}
                        - proposal.instances.first.experiment.instances.future.or(proposal.instances.first.experiment.instances.current).order(:start_at).each do |i|
                          %li
                            = link_to i.name, experiment_instance_path(i.experiment, i)
                            %br/
                            %em= date_range(i.start_at, i.end_at)
                          
                          
                  - else 

          
                    %br/
                    %em Next at:
                    %ul
                      - proposal.instances.first.experiment.instances.future.order(:start_at).each do |i|
                        %li
                          = link_to i.name, experiment_instance_path(i.experiment, i)
                          %em= date_range(i.start_at, i.end_at)
                  - unless proposal.instances.past.empty?
                    %p &nbsp;
                    %p Last meeting:
                    = link_to proposal.instances.past.order(:end_at).last.name, [proposal.instances.first.experiment, proposal.instances.first]
                    %br/
                    %em= date_range(proposal.instances.past.order(:end_at).last.start_at, proposal.instances.past.order(:end_at).last.end_at)
                    .attended= pluralize(proposal.instances.past.order(:end_at).last.users.size + proposal.instances.past.order(:end_at).last.onetimers.unclaimed.size, 'person') + " participated" 
            %td.pledge_info
              - if proposal.stopped == true || (proposal.scheduled? && !proposal.recurs?)
                = raw(proposal.pledged.to_s + tsign)
                %small
                  out of 
                  = proposal.total_needed_with_recurrence
                  -#- if proposal.recurrence == 2 || proposal.recurrence == 3 
                  -#  = " / #{proposal.total_needed_with_recurrence}"
              - else
                = raw(proposal.remaining_pledges.to_s + tsign)
                %small
                  out of 
                  = proposal.needed_for_next
                  -#- if (proposal.recurrence == 2 || proposal.recurrence == 3 ) &&  proposal.intended_sessions != 0
                  -#  = " / #{proposal.total_needed_with_recurrence - proposal.spent}"
              = link_to fa_icon('info-circle'), '#' , :"data-open" => "proposal_pledge_info_#{proposal.id.to_s}"
              .metadata
                %em= pluralize(proposal.pledges.map(&:user).uniq.size, 'person') + ' pledged' 
              .reveal{id: 'proposal_pledge_info_' + proposal.id.to_s, :"data-reveal" => ''}
                .title= link_to proposal.name, proposal

                - if proposal.recurs?
                  .recurring_explanation
                    Each recurring event gets a 10% discount in Temps from the previous meeting, until it gets down to 
                    = raw "20#{tsign}, which is the minimum."
                  .recurring_explanation
                    Number of meetings proposed:
                    - if proposal.intended_sessions == 0
                      unknown/indefinite
                    - else
                      = proposal.intended_sessions.to_s
                    
                  %ul.table_right
                    - if proposal.intended_sessions == 0
                      - if proposal.instances.published.empty?
                        nothing scheduled
                      - else
                        - proposal.instances.published.order(:start_at).each do |instance|
                          %li
                            = "##{instance.session_number}: "
                            - if instance.in_future?
                              %strong= link_to 'SCHEDULED', experiment_instance_path(instance.experiment, instance)
                            - else
                              = link_to 'Took place on ' + instance.start_at.to_date.to_s, experiment_instance_path(instance.experiment, instance)
                            = " : "
                            = proposal.has_for(instance.session_number - 1).to_s
                            of 
                            %strong
                              = proposal.needed_for(instance.session_number - 1).to_s
                              = raw tsign
                        %li
                          = "##{proposal.instances.published.size + 1}: "
                          = link_to 'ACCEPTING MORE PLEDGES NOW:', new_proposal_pledge_path(proposal)
                          = proposal.has_for(proposal.instances.published.size )
                          out of
                          %strong
                            = proposal.needed_for(proposal.instances.published.size ).to_s
                            = raw tsign
                    - else              # NOT recurring indefinitely, but fixed
                      - (1..proposal.intended_sessions).each do |num|
                        %li
                          = "##{num}: "
                          - if proposal.instances.published.order(:start_at)[num-1].nil?
                            = link_to 'ACCEPTING MORE PLEDGES NOW: ', new_proposal_pledge_path(proposal)
 
                          - elsif proposal.instances.published.order(:start_at)[num-1].in_future?
                            %strong= link_to 'SCHEDULED', experiment_instance_path(proposal.instances.published.order(:start_at)[num-1].experiment, proposal.instances.published.order(:start_at)[num-1])
                          - else
                            = link_to 'Took place on ' + proposal.instances.published.order(:start_at)[num-1].start_at.to_date.to_s, experiment_instance_path(proposal.instances.published.order(:start_at)[num-1].experiment, proposal.instances.published.order(:start_at)[num-1])
                          = " : "
                          - if proposal.instances.published.order(:start_at)[num-1].nil?
                            = proposal.has_for(num - 1).to_s
                          - else
                            = proposal.instances.published.order(:start_at)[num-1].cost_in_temps.to_s
                          of
                          %strong
                            = proposal.needed_for(num-1).to_s
                            = raw tsign
                          

                - else
                  .recurring_explanation
                    = raw @current_rate.to_s + tsign
                    must be pledged before this proposal can be reviewed and scheduled.
                  %ul.table_right
                    %li
                    - if proposal.scheduled?
                      %strong= link_to 'SCHEDULED', experiment_instance_path(proposal.instances.first.experiment, proposal.instances.first)
                    - elsif proposal.has_enough?
                      %strong= link_to 'AWAITING REVIEW', experiment_instance_path(@next_meeting.experiment, @next_meeting), target: :_blank rescue 'Awaiting review'
                    - else
                      = link_to 'ACCEPTING MORE PLEDGES NOW: ',  new_proposal_pledge_path(proposal)
                    = proposal.remaining_pledges.to_s
                    of
                    %strong
                      = proposal.total_needed_with_recurrence.to_s
                      = raw tsign
                .total
                  TOTAL:
                  = proposal.pledged.to_s
                  of 
                  %strong
                    = raw (proposal.total_needed_with_recurrence.to_s + tsign)
                .pledge_info
                  %p
                    - if proposal.scheduled?
                      - unless proposal.spent == 0
                        Pledges spent:
                        = raw proposal.spent.to_s + tsign
                        %br/
                        = proposal.pledges.converted.group_by(&:user).map{|x| x.first.username + " (#{x.last.sum(&:pledge)})"}.join(', ')
                    - unless proposal.pledges.unconverted.empty?
                      %br/
                      %br/
                      Pending pledges: 
                      = raw proposal.remaining_pledges.to_s + tsign
                      %br/
                      = proposal.pledges.unconverted.map{|x| x.user.username + " (#{x.pledge})"}.join(', ')

                    

              .pledge_buttons
                - unless proposal.stopped == true
                  - if proposal.recurs?
 
                    - if user_signed_in? && proposal.pledgeable?
                      - if current_user.active_pledge?(proposal)
                        = link_to 'Edit pledge', edit_proposal_pledge_path(proposal,current_user.pledges.unconverted.find_by(item:proposal) ), class: [:button, :small]
                      - elsif current_user.has_pledged?(proposal) && proposal.pledgeable?
                        = link_to raw("Pledge more #{tsign}!"), new_proposal_pledge_path(proposal), class: [:button, :small]                      
                      - else
                        = link_to raw("Pledge #{tsign}!"), new_proposal_pledge_path(proposal), class: [:button, :small]
                    - elsif proposal.pledgeable?
                      = link_to raw("Pledge #{tsign}!"), page_path('why-join'), class: [:button, :small]

              
                  - else
                    - if user_signed_in? && proposal.pledgeable?
                      - unless proposal.stopped? || (proposal.scheduled? && proposal.instances.published.future.empty?)
                        - if current_user.active_pledge?(proposal)
                          = link_to 'Edit pledge', edit_proposal_pledge_path(proposal,current_user.pledges.unconverted.where(item:proposal).first), class: [:button, :small]
                        - elsif current_user.has_pledged?(proposal) && proposal.pledgeable?
                          = link_to raw("Pledge more #{tsign}!"), new_proposal_pledge_path(proposal), class: [:button, :small]
                        -elsif proposal.pledgeable?
                          = link_to raw("Pledge #{tsign}!"), new_proposal_pledge_path(proposal), class: [:button, :small]
                    - elsif user_signed_in? && !proposal.pledgeable?
                      - if current_user.active_pledge?(proposal)
                        = link_to 'Edit pledge', edit_proposal_pledge_path(proposal,current_user.pledges.unconverted.where(item:proposal).first), class: [:button, :small]
                        
              - if user_signed_in?
                - if current_user.has_pledged?(proposal)
                  .my_pledge
                    - unless current_user.pending_pledges.where(item:proposal).empty?
                      = raw "You pledged #{current_user.pending_pledges.where(item:proposal).sum(&:pledge)}#{tsign} "
                    - unless current_user.spent_pledges.where(item:proposal).empty?
                      %br/
                      = raw "You spent #{current_user.spent_pledges.where(item:proposal).sum(&:pledge)}#{tsign}"
              

            %td
     
              - if proposal.scheduled?
            
                - if proposal.recurs?
                  - if proposal.instances.current.or(proposal.instances.future).empty?
                    - if proposal.intended_sessions == 0
                      .status To be continued...
                    - else
                      .status Completed
                  - else
                    .status Scheduled
                  
                - elsif proposal.instances.current.or(proposal.instances.future).empty?
                  .status Completed
                - else
                  .status Scheduled
                - unless proposal.next_instance.nil?
                  - if proposal.next_instance.end_at < Time.current
                    = link_to proposal do
                      Error
                  - else
                    = link_to proposal do
                  
                      - if proposal.recurs?
                        - if proposal.intended_sessions == 0 || proposal.pledged < proposal.total_needed_with_recurrence
                          .status.below but accepting more pledges              
                    - if proposal.recurs?
                      .recurrence
                        - if proposal.intended_sessions == 0
                          - if (proposal.needed_for_next - proposal.remaining_pledges) > 0 
                            = raw "#{(proposal.needed_for_next - proposal.remaining_pledges)} more #{tsign} needed to schedule next meeting (##{proposal.instances.published.size + 1})"
                          - else
                            Enough Temps are pledged to schedule
                            = proposal.number_that_can_be_scheduled.to_s
                            more meeting(s)
                        - elsif  proposal.intended_sessions > proposal.instances.published.size 
                          - if (proposal.needed_for_next - proposal.remaining_pledges) > 0 
                            = raw "#{(proposal.needed_for_next - proposal.remaining_pledges)} more #{tsign} needed to schedule next meeting (##{proposal.instances.published.size + 1})"

                    

                        - elsif (proposal.total_needed_with_recurrence - proposal.spent - proposal.remaining_pledges) == 0
                          %p
                            All required
                            = raw tsign
                            have been pledged and/or spent.
                    
                        - else
                          = raw "#{proposal.total_needed_with_recurrence - proposal.spent - proposal.remaining_pledges} more #{tsign} needed to schedule all #{proposal.intended_sessions.to_s} proposed #{'meeting'.pluralize(proposal.intended_sessions)}."
                        

                - else 
                  - if proposal.instances.first.experiment.end_date < Time.current && proposal.instances.first.experiment.instances.future.empty?
                    - if proposal.recurs?
                      - if proposal.intended_sessions == 0
                        = link_to proposal do
                          .status.completed and accepting more pledges
                        .recurrence
                          - if proposal.intended_sessions > proposal.instances.published.size || proposal.intended_sessions == 0 
                            - if (proposal.needed_for_next - proposal.remaining_pledges) > 0 && !proposal.instances.published.empty?
                            
                              = raw "#{(proposal.needed_for_next - proposal.remaining_pledges)} more #{tsign} needed to schedule next meeting (##{proposal.instances.published.size + 1})"

                    

                          - elsif (proposal.total_needed_with_recurrence - proposal.spent - proposal.remaining_pledges) == 0
                            %p
                              All required
                              = raw tsign
                              have been pledged and/or spent.
                    
                          - else
                            = raw "#{proposal.total_needed_with_recurrence - proposal.spent - proposal.remaining_pledges} more #{tsign} needed to schedule all #{proposal.intended_sessions.to_s} proposed #{'meeting'.pluralize(proposal.intended_sessions)}."

                  - elsif proposal.instances.first.experiment.instances.future.empty?
                    - if proposal.stopped
                      = link_to proposal do
                        .status Completed
                    - elsif proposal.has_enough?

                      = link_to proposal do
                        .status
                          Awaiting review
                          - if proposal.recurs?
                            - if proposal.intended_sessions == 0 || proposal.pledged < proposal.total_needed_with_recurrence
                              and accepting more pledges
                  - else
                    = link_to proposal do
                      .status Needs more support!
                    .status_info
                      = raw "#{proposal.needed_for_next - proposal.remaining_pledges} more #{tsign} needed before " + (proposal.recurrence == 2 || proposal.recurrence == 3 ? 'next session' : 'it') + " can be scheduled"

              

                -#%em= date_range proposal.instances.first.start_at, proposal.instances.first.end_at  
              - else 
                - if proposal.has_enough?
                  = link_to proposal do
                    .status
                      Awaiting review
                      - if proposal.recurs?
                        - if proposal.intended_sessions == 0 || proposal.pledged < proposal.total_needed_with_recurrence
                          but accepting more pledges
                  .status_info
                    = raw "Enough #{tsign} have been pledged to schedule "
                    - if proposal.recurs?
                      = pluralize(proposal.number_that_can_be_scheduled, 'meeting')
                      - unless proposal.intended_sessions == 0 
                        = "of #{proposal.intended_sessions.to_s}"
                  
                
                
                  .status_info
                    %strong Will be reviewed at next organisation meeting:
                    - if @next_meeting.nil?
                      %em none currently scheduled
                    - else
                      = link_to @next_meeting.name, experiment_instance_path(@next_meeting.experiment, @next_meeting), target: :_blank
                - else
                  = link_to proposal do
                    .status Needs more support!
                  .recurrence
                    = raw "#{proposal.needed_for_next - proposal.remaining_pledges} more #{tsign} needed before " + (proposal.recurs?  ? 'next session' : 'it') + " can be scheduled"
                    - if proposal.recurs?
                      - if proposal.recurrence == 3 && proposal.intended_sessions == 0
                        .recurrence
                          Proposal is ongoing without a fixed end, so 
                          = raw tsign
                          are continually needed to keep it happening!

                  - if proposal.recurs?
                    .recurrence
                      - if proposal.intended_sessions > proposal.instances.published.size
                        - if (proposal.needed_for_next - proposal.remaining_pledges) > 0 && !proposal.instances.published.empty?
                    
                          = raw "#{(proposal.needed_for_next - proposal.remaining_pledges)} more #{tsign} needed to schedule next meeting (##{proposal.instances.published.size + 1})"

                    

                      - elsif (proposal.total_needed_with_recurrence - proposal.spent - proposal.remaining_pledges) == 0
                        %p
                          All required
                          = raw tsign
                          have been pledged and/or spent.
                    
                      - else
                        = raw "#{proposal.total_needed_with_recurrence - proposal.spent - proposal.remaining_pledges} more #{tsign} needed to schedule all #{proposal.intended_sessions.to_s} proposed #{'meeting'.pluralize(proposal.intended_sessions)}."
              
            
              .comment_status
                - if proposal.comments_and_pledges.empty? 
                  %em No comments or pledges yet.
                - else
                
                  %em
                  
                  
                    - if proposal.comments.empty?
                      = 'no comments yet.'
                    - else
                      = pluralize(proposal.comments.size, 'comment') +  ' on proposal;'
                    %br/
                    last 
                    = proposal.comments_and_pledges.last.class.to_s.downcase
                    by
                    = link_to proposal.comments_and_pledges.last.user.display_name, proposal.comments_and_pledges.last.user, target: :_blank
                    = time_ago_in_words(proposal.comments_and_pledges.last.created_at) + " ago"
                  
                  
          .reveal.occluded[proposal]{:"data-reveal" => ''}
            %h2= proposal.name
            = link_to 'See full proposal and comments', proposal, class: [:button]
            .title Description:
            .answer= simple_format proposal.short_description
         
            .title Goals:
            .answer= simple_format proposal.goals

            .title How often?
            .answer
              - if proposal.recurrence == 1
                One time only
              - elsif proposal.recurrence == 2
                Multiple meetings 
                - if proposal.intended_sessions == 0
                  Planned indefinitely
                - else
                  = " (#{proposal.intended_sessions} estimated)"
              - elsif proposal.recurrence == 3
                = 'Recurring regularly '
                - if proposal.intended_sessions == 0
                  Planned indefinitely
                - else
                  = " (#{proposal.intended_sessions} estimated)"

              - else
                One time only
            %br/
            .title Timeframe
            .answer= simple_format proposal.timeframe
          
            .title Intended participants:
            .answer= simple_format proposal.intended_participants
          %tr.border_row
            %td.border{colspan:  5} &nbsp;
= content_for :jquery do
  :plain
    $('table.proposals').cardtable();