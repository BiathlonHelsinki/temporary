.title= link_to proposal.name, proposal
%strong 
  = raw t(:cost_rose)
- if proposal.recurs?
  .recurring_explanation
    = raw(t(:each_recurrent_event_explanation))

  
  .recurring_explanation
    = t(:number_of_meetings_proposed)
    - if proposal.intended_sessions == 0
      = t(:unknown_indefinite)
    - else
      = proposal.intended_sessions.to_s
    
  %ul.table_right
    - if proposal.intended_sessions == 0
      - if proposal.published_instances == 0
        = t(:nothing_scheduled)
      - else
        - proposal.instances.published.order(:start_at).each do |instance|
          %li
            = "##{instance.session_number}: "
            - if instance.in_future?
              %strong= link_to t(:scheduled).upcase, experiment_instance_path(instance.experiment, instance)
            - else
              = link_to t(:took_place_on, date: instance.start_at.to_date.to_s), experiment_instance_path(instance.experiment, instance)
            = " : "
            = proposal.has_for(instance.session_number - 1).to_s
            of 
            %strong
              = proposal.needed_for(instance.session_number - 1).to_s
              = raw tsign
        %li
          = "##{proposal.published_instances + 1}: "
          - text = (proposal.has_for(proposal.published_instances ) >= proposal.needed_for(proposal.published_instances ) ) ? t(:ready_to_schedule).upcase : t(:accepting_more_pledges_now).upcase
          / - if proposal.is_month_long
            
          / - else
          %strong= link_to text, new_proposal_pledge_path(proposal)
          = proposal.has_for(proposal.published_instances )
          out of
          %strong
            = proposal.needed_for(proposal.published_instances ).to_s
            
            = raw tsign
        - if proposal.remaining_pledges_cached > proposal.needed_for(proposal.published_instances)
          %li
            = "##{proposal.published_instances + 2}: "
            = link_to 'ACCEPTING MORE PLEDGES NOW: ', new_proposal_pledge_path(proposal)
            = proposal.has_for(proposal.published_instances + 1)
            out of
            %strong
              = proposal.needed_for(proposal.published_instances + 1 ).to_s
              = raw tsign
    - else              # NOT recurring indefinitely, but fixed
      - if proposal.recurrence == 2 && proposal.require_all == true
        %li
          = proposal.intended_sessions.to_s + ' day activity - '
          - if proposal.instances.published.empty?
            - if proposal.remaining_pledges >= proposal.total_needed_with_recurrence
              WAITING TO BE SCHEDULED
            - else
              = link_to t(:accepting_more_pledges_now).upcase, new_proposal_pledge_path(proposal)
          - elsif proposal.pledges.converted.sum(&:pledge) >= proposal.total_needed_with_recurrence
            = link_to t(:took_place_on, date: proposal.instances.published.first.start_at.to_date), proposal.instances.published.first
          = proposal.remaining_pledges.to_s
          of
          %strong
            = proposal.total_needed_with_recurrence.to_s
            = raw tsign
            
      - else
        - (1..proposal.intended_sessions).each do |num|
          %li
            = "##{num}: "
            - if proposal.instances.published.order(:start_at)[num-1].nil?
              - if proposal.has_for(num - 1) >= proposal.needed_for(num - 1)
                = t(:waiting_to_be_scheduled).upcase
              - else 
                = link_to t(:accepting_more_pledges_now).upcase, new_proposal_pledge_path(proposal)

            - elsif proposal.instances.published.order(:start_at)[num-1].in_future?
              %strong= link_to t(:scheduled), experiment_instance_path(proposal.instances.published.order(:start_at)[num-1].experiment, proposal.instances.published.order(:start_at)[num-1])
            - else
              = link_to t(:took_place_on, date: proposal.instances.published.order(:start_at)[num-1].start_at.to_date.to_s), experiment_instance_path(proposal.instances.published.order(:start_at)[num-1].experiment, proposal.instances.published.order(:start_at)[num-1])
            = " : "
            - if proposal.instances.published.order(:start_at)[num-1].nil?
              = proposal.has_for(num - 1).to_s
            - else
              = proposal.instances.published.order(:start_at)[num-1].cost_in_temps.to_s 
            of
            %strong
              = proposal.needed_for(num-1).to_s
              = raw tsign
          

- else
  .recurring_explanation
    = raw(t(:x_must_be_pledged_before, amount: @current_rate.to_s))
    
  %ul.table_right
    %li
    - if proposal.scheduled?
      %strong= link_to t(:scheduled).upcase, experiment_instance_path(proposal.instances.first.experiment, proposal.instances.first)
    - elsif proposal.has_enough_cached
      %strong= link_to t(:awaiting_review).upcase, experiment_instance_path(@next_meeting.experiment, @next_meeting), target: :_blank rescue t(:awaiting_review).upcase
    - else
      = link_to t(:accepting_more_pledges_now).upcase,  new_proposal_pledge_path(proposal)
    = proposal.remaining_pledges_cached.to_s
    of
    %strong
      = proposal.total_needed_with_recurrence_cached.to_s
      = raw tsign
.total
  = t(:total) + ":"
  = proposal.pledged_cached.to_s
  of 
  %strong
    = raw (proposal.total_needed_with_recurrence_cached.to_s + tsign)
.pledge_info
  %p
    - if proposal.scheduled?
      - unless proposal.spent == 0
        = t(:pledges_spent) + ":"
        = raw proposal.spent.to_s + tsign
        %br/
        = proposal.pledges.converted.group_by(&:user).map{|x| x.first.username + " (#{x.last.sum(&:pledge)})"}.join(', ')
    - unless proposal.pledges.unconverted.empty?
      %br/
      %br/
      = t(:pending_pledges)
      = raw proposal.remaining_pledges_cached.to_s + tsign
      %br/
      = proposal.pledges.unconverted.map{|x| x.user.username + " (#{x.pledge})"}.join(', ')