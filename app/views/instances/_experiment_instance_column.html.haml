= link_to experiment_instance_path(exp.experiment, exp), class: [:experiment, :column] do
  .content{:"data-equalizer-watch" => ''}
    .meta{class: exp.experiment.slug}
      %span.date= exp.start_at.year.to_s
      = "//"
      %span
        - if exp.experiment.instances.size > 1
          = exp.experiment.name
        - else
          = "Experiment "
        = "##{exp.sequence}"
      -#= "//"
    .dates.text-center
      - if exp.experiment.slug == 'open-time'
        .ongoing Ongoing

        - n = exp.experiment.instances.current
        - unless n.empty?
          - n = n.first
          - if exp == n
            - if exp.experiment.slug == 'open-time'
              - if @temporary_is_open == true
                .next Open now!
              - else
                .next Currently not open, check back soon
            - else
              .next Happening now!
          - else
            - if exp.end_at < Time.now  
              .next Happened on:
            - else 
              .next Next at:
        - else
          .next Next at:
          
        .ongoing_month
          - if exp.experiment.slug == 'open-time'
            - if @temporary_is_open == true
              = l exp.start_at, format: '%B'
          - else
            = l exp.start_at, format: '%B'
        .days
          - if exp.experiment.slug == 'open-time'
            - if @temporary_is_open == true
              .day= Time.current.to_date.day.to_s
            - else
              every day!
          - else
            .day= exp.start_at.day
          - if exp.experiment.slug == 'open-time'  
            .times
              
              - if @temporary_is_open == true
                All the time
              - else
                
          - else
            .times
              -if exp.end_at.nil?
                =  exp.start_at.strftime("%H:%M") 
              - else
                =  exp.start_at.strftime("%H:%M") + " - " + exp.end_at.strftime("%H:%M")
      - else
        .month= l exp.start_at, format: "%B"
        .days
          - if exp.experiment.instances.size == 1
            - if exp.start_at.to_date == exp.end_at.to_date
              .day= exp.start_at.day
              .times= exp.start_at.strftime("%H:%M") + " - " + exp.end_at.strftime("%H:%M")
            - else
              .range_day= exp.start_at.day
              .divider= fa_icon('angle-down')
              .range_day= exp.end_at.day
          - else
            - if exp.start_at.to_date == exp.end_at.to_date
              .day= exp.start_at.day
              .times
                - if exp.end_at.strftime("%H:%M") == '23:59'
                  = exp.start_at.strftime('%H:%M') + " - ??"
                - else
                  = exp.start_at.strftime("%H:%M") + " - " + exp.end_at.strftime("%H:%M")
            - else
              .range_day= exp.start_at.day.to_s
              .divider= fa_icon('angle-down')
              - if exp.start_at.month != exp.end_at.month
                .month= l exp.end_at, format: "%B"
              .range_day= exp.end_at.day

    .title.text-center=  exp.name
    .body.text-center= truncate_html(strip_tags(exp.description.gsub(/\s*(&nbsp;\s*)+/, " ")), length: 110)

    - unless exp.in_future?
      .participants=  pluralize(exp.users.size + exp.onetimers.unclaimed.size, 'person') + " participated"
      .temps
        = raw("#{(exp.users.uniq.size * exp.cost_bb).to_s}#{tsign} earned") #, page_path('what-is-this-t-everywhere')
    - else
      .earn_line
        = raw "Earn #{exp.cost_bb}#{tsign} "
        - if exp.allow_multiple_entry == true
          = "per day "
        = "for participating!"
        - if exp.request_registration == true
          .red
            
            - if exp.is_full?
              Sorry, there is no more space left.
            - else
              You must register in advance!
              - unless exp.max_attendees.blank?
                There
                = exp.max_attendees - exp.registrations.not_waiting.size == 1 ? 'is' : 'are'
                = pluralize(exp.max_attendees - exp.registrations.not_waiting.size, 'place')
                left.
            
      - if controller.action_name == 'index'
        - if exp.experiment.collapse_in_website == true
          - unless exp.experiment.instances.future.published.to_a.delete_if{|i| i == exp}.empty?
            .collapsed
              .also_meets Also meets:
              = exp.experiment.instances.future.published.to_a.delete_if{|i| i == exp}.map{|x| l(x.start_at.to_date , format: :short)}.join(', ')